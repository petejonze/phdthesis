%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.0.0%%For: (Phil Rowley) ()%%Title: (UoN-UK-C-M.BlueRGB.eps)%%CreationDate: 01/12/2010 07:53%%Canvassize: 16383%%BoundingBox: 888 1318 1378 1516%%HiResBoundingBox: 888.8867 1318.0068 1377.4492 1515.1045%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 0.912474 0.787625 0.619837 0.97467 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1134.5 1417.1504 1134.5 1417.1504%AI3_TileBox: 854.3604 1037.3252 1413.3604 1820.3252%AI3_DocumentPreview: Header%AI5_ArtSize: 2267.7207 2834.6499%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 700.3594 1732.8242 1.5 1835 869 26 0 0 51 165 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 52 8%%BeginData: 8180 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD21FF59FD6AFFA8AFA8AFA8FD10FF5AA8FD64FF84FFFFA9060606%28062FFFFFA8A9FD0CFF59FD62FFA8590606A8FF7E060606000606FFFF7E%002F7DFD0AFF59A8FD60FFA806000606FFFFA906060628062EFFFF7E0606%062FFD09FF59FD61FF8400060606A8FF7EFD0606FFFFA80006002FFD09FF%59A8FD0CFFAFA8FD17FFA8A9FD14FFA8FD14FFAFA8FD0EFF7EFD0406592F%28FD06062F7E7D7E592F06FD09FF59FD07FFA959535A2FA82853FD0BFFA8%53FFFF597EFD06FF5306FD13FFA90659FF7EA8FD0FFF7E0059FD0EFF7E00%0606060006060605060606050600060653537EA8FD07FFA859A8FD07FF2E%06002E7D2F28FFA8FFFFFFA8A8FD04FF5301A8FF0053FFFFA8A9FFFF7E84%A9FFFFFFAFFFFFFFA8FFFFFFA9A8A8FFA8A8A8FF59A9A80653FFA8FFFFFF%A8FD05FFA8FFFFFF062EA8FD0EFF7EFD0406280606062806060628FD0606%2FFD09FF59FD09FF5306FFFF2806060659FF532E0659FFFFFF7E06FFFF06%59A8062F0653FF592F8406A9FF2F53A9062F06AFA92F06597E28065AAF2F%7E8406067E7E06FF7D06A8FFFFA8060606FF7E06067EFD0EFF8400FD1206%2EFD09FF5AA8FD08FF5905FFFF2E28FF2E2E7E0684A90084FFFF5906A8FF%057E5906A88400A82E2FA80653A9007E0653FF2F28A8007EFF2F06AFFFAF%007EA80653FF2F06FF7E00AFFFFF062FA8062EFF062FA8FD0EFF7EFD1306%2EFD09FF59FD09FF5306FFFF0653FF592E7E00532F0659FFFF7E00FFFF06%598406FFA806A85306FF2F2F5328A806285906067E067EFF590628A9A806%59FF067EFF5906FF5906A8FFA80659FF2F2FFF2F53FD0FFF7E0006050606%06050606060006060605060606002FFD09FF59A8FD08FF5906FFFF2E2EFF%2F2F590653A87EA9FFFF5306A8FF00595906A8A800A82F28FF8400062FFF%062F7DA884A80084FFFF842806A8007EFF0659FF2F06FF7E00A9FFFF0059%FF2F06FF0659FD0FFFA8060628060606280606062F2FFD070628FD09FF59%FD09FF5306FFFF062FFF5906FF06537E7EA8FFFFA800532F06848400FFA8%06A85306FFFF0600A9FF59068459A8A8067EFF5984282FA80659FF062FA8%7E005A2F06A8FFFF2F067E067EFF2E2FFD10FF7DFD090659530628060600%060084FD09FF59A8FD08FF8453FFFF7E59FF7D5AFFA82E2F2EA9FFFFFF7E%282F59FF7E59A9A92FAF7D59FFFF7D59A8FFFF59062F7EAF2FA9FF590653%A8FF2FA8FF84067EFF7E532F06A9FFFFA8530659FFFF5384FD11FF53FD08%06FD05FFA8842FA8FD0AFF59FD43FF84AF2E06FD1CFF5900060653060600%28A9FFFFA859FD0DFFA859A8FD41FF842F062F7EFD1CFF530606A8A8FD04%06FFFFFF5306FD0EFF59FD63FF5300067EFF06060528AFFFFF5900AFFD0D%FF5AA8FD27FFA8532FFD14FF8453A8FD21FF2F0606A8A928060606FFFFFF%5306A8FD0DFF59FD09FF2F2F59FD04FF5A0684FD0AFFAF7E53FFFFFFA87E%7EFFFF84000684FD13FF060159FD21FF2F00067EFFFD0406A8FFFF5300AF%FD0DFF59A8FD07FFA806000684FFFFFF280059FD0AFF840028FFFFFF5900%59FFFFA85959FD14FF2F007EFD21FF280606A8FF2F060606FFFFFF2F06A8%FD0DFF59FD09FF06060653FFFFFF59007EFFFFFFA97E84A9FFFFFF590606%A9A9FF2F062FA9FFFFA8AFFFFFFFA97E847EFD07FF7E847EFFFFFF280659%FF7EA9FD05FFA87E84A8FD05FF7E847EA9FFFF84847EFD07FF280006A8FF%FD0406A8FFFF2F00A8FD0DFF59A8FD07FFA82806060084FFFF2E0659FFAF%530006000659FF53060606007E2F06060600A8A80606FF7E060606000606%7EFFFFFF5300060006007EFF2F00060006002FA8FF8406000600062FFFFF%7E06060006002F0606000606A9FD05FF06060684A828060606FFFFFF532F%A8FD0DFF59FD09FF0628530606FFFF53007EFF59002FA8A90606A8FF2F06%067EA8AF2F062EA8FFA90606FF7E002FA8FF530606FFFF59002E84FF2F06%53FF2E062EA9842F0059FFFF53A8A8A806067EFF2E062FFFA82F012FA8AF%2F062EFD04FF7E060606000606060006A8FD11FFA859A8FD07FFA80600A8%2E0053FF2E0059FF060653FFFF590053FF84002FFFFFFF590059FFFF8406%05FF590106FFFFFF060684AF00067DFFFF590059FF2F007EFFFF7D0606FD%06FF590053FF530059FFFF53062FFFFF840006FFFFFFA82E060606280606%0628062FFD12FF59FD09FF0606A8FF0606A9590084A80606A8FFFF7E0606%FF7E062EFFFFFF590653FFFFA90628FF84002FFFFFFF2F06AF840606FFFF%FF590653FF2E0659FFFF84062FFFFF8453FD04062FFF2F0659FFFF840053%FFFF7E0606FFFFFF5900FD0A06FD12FF5AA8FD07FFAF0600A8FF5900532F%017DA8000684FFFFA80006FF84002FFFFFFF590059FFFF840606FF590606%FFFFFF0606A87E0028FFFFFF590059FF2F007EFFFF7E0606FF7E0600597D%2F0053FF530059FFFF59062FFFFF840006FFFFFF59FD0A062FFD12FF59FD%09FF060684FFFF28062F0184A80606A8FFFF840606FF7E0628FFFFFF5306%53FFFFA90606AF84002FFFFFFF2806FF7E0606FFFFFF530659FF280659FF%FF84062EFF2F005AFFFF7E062FFF2F0653FFFF7E0059FFFF7E0606FFFFFF%7E00060506060605FD0406FD12FF59A8FD07FFA80600A8FFFF5906000659%FF00067DFFFF7E002FFF84002FFFFFFF590059FFFF7E0606FF590628FFFF%FF060684A80006A8FFFF590059FF2F007EFFFF7D0606AF06067EFFFF7E00%53FF530059FFFF59002EFFFF7E0006FFFFFF59FD0A062FFD12FF59FD09FF%060684FFFFFF2E06067EFF2F0053FFFF2F0659FF7E0606FFFFFF53062FFF%FFA90606FF84002FFFFFFF2E06A9FF2F0059FFFF530659FF2E067DFFFFA8%062FFF2F015AFFFF7E062FFF2F0653FFFF7E0059FFFF7E0606FFFFFF7E00%06285959592E28000606FD12FF59A8FD07FFA80600A8FFFFFFA8000159FF%8406002F280628FFFFAF0606007EFF84000606A8840600FF590006FFFFFF%06067EFF7E06000606060059FF28007EFFFF7D0606FF7D060053592F002F%FF2F0053FFFF590028FFFF7E0006FFFFFFA8597E847EA8A8FFAFA92F06A9%FD11FF59FD09FF5359A8FD04FF7E2FA8FFFFA859282F59FD04FFA92F2F7D%FFFF842F53A8FF535AFFA82F7EFFFFFF5A53AFFFFFA8592E5A2F0653FF59%5384FFFFA92F7EFFFF7E5306282859A8FF7D597EFFFFA82F7EFFFFA85953%FFFFFF7E060600060006062F7DFFA8FD11FFA859A8FD3AFF530059FD04FF%AFFD17FFAFFD04FFA82F00282E532F2F06060006067EA8FD07FFA984AFFD%07FF59FD36FFA97EFFFF84060684FD20FF842F2FA8A8FD05FF7E2F000600%062F84A8A9A8A8532F84FD08FF5AA8FD35FF28010606000653FD21FF7EA8%FD0AFFA82E06010600FD040653A9FD09FF59FD36FFAF5959535984FD30FF%847E2F2F062F53A8FD0BFF59A8FD7EFF59FD7FFF7EA8FDFCFFFDFCFFFDFC%FFFDFCFFFD6EFFA8A9FFAFA8A859FFA8A984A87E7E59A97E7E59AF847E53%A9FFFFFF84FFA87EA9A8A859FFA8AFFF7E537EFF845959A8FFA85953AFFF%7EA8FFA959FD09FFA85359A8A8FFFF7EFF7EFF53FFFFA8FFFF59AFFD09FF%7E84FFFF7EA9FF7E84FFFF7EFFFFFFA87EFF7EFFFF7EA8537EFF84AFFF59%A9FFFF7E7EFF7D845906A8A87E7E59FF537EFF5984FFFF597EA828FFFFFF%2EA82FFF53A85906A8847E7E53FFA8FF2EFF7E53A82FA8A828FF0659FF7E%06FD09FF28A9A8AF2EFFFF53A853A8062FFF53FFA82859FD09FF282FFFA8%00A8FF5306FFA82FFFFFFF7E06AF537E7E592EA8A8FF2EFFA82E53FFFF7E%A8FFA884A8537EA8A87DA8FF7E7EFF595959FF59A9FF7E7EFFFF5328FFFF%7E84A82F7E84A853FFFFFFAF59FFFF537E59FFFF5A845953FF5953A8FFFF%FFA8FFFFFF7E5AFFFFFF53597E2EFF53AF5959A87EFF84A859FD04FFA8FD%04FF7E2FFF7E5384FF7E847EFF53FFFFFF59A87DFF2E59FF7E2FA9FF59FF%84845AA8FF7E7EFF7E847DA82F59847E7DFF5984FF597DA8A859A8FF5384%FFFF2E2F7EFF59A87DA82F598459A8FF7D8453FFFF535959FFFF53845359%7D7E59A8FFFFA92FA8FFFF842FFFFFFF2EA8842FA859A87E845959FF2E7E%2884FFFFFF537DFFFFFF597E7D7E53A87D535359AF53FFFF7E2F592FFF7E%59FFFFA8288453FF2E7E2E7EFF7D59FF597E84A8A906A87D84FF7E7EFF53%A8FFFF53A8A82FA9FFFF59A82FA87E7E84A8A906A97D59FF598459A88453%FF2EA9A853A87EA806847EA8FD08FF2F84FFA859FFFF53AF2FAF59FF2F2F%7E59A87E53FD08FF59A82F7E7E7D597EA82FA82FFFAF597DA92FA97E7EFF%FFFF597D5A7E5984842FFFFF535959FF7EAFFF5984A884FF7EA8FF7E2F59%84842F59A8FFFFFF7DFFA87E7EA97EAFFF59A8FF535359FF595953FFFFA8%2E59A8FF7EFF53FF7DAFFD08FF84532FA87DFFFF84A87EA884FFA85384A8%FFFF7EA8FD07FF7DFF53FFA87E7EFFFFA87E7E535959FFFFA87EA884FF59%5959FF7D8484FFFF7E%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.912474 0.787625 0.619837 0.97467 ([Registration]) 0 Xs([Registration])Pc0.952819 0.614557 0.26685 0.110903 0 0.333333 0.505882 Xa(C=100 M=25 Y=0 K=50 1)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au1 O1 0.827298 0.350957 0.214145 0 0.2 0.4 Xa0 J 0 j 1 w 4 M []0 d0 XR1333.3672 1488.6802 m1330.7461 1488.6802 1330.1914 1487.4375 1330.1914 1485.5107 c1330.1914 1484.54 l1333.9258 1484.54 l1333.9258 1480.6748 l1330.1914 1480.6748 l1330.1914 1463.1445 l1324.5313 1463.1445 l1324.5313 1480.6748 l1322.1855 1480.6748 l1322.1855 1484.54 l1324.5313 1484.54 l1324.5313 1486.0601 l1324.5313 1490.3418 1327.2949 1492.6875 1331.9893 1492.6875 c1332.9551 1492.6875 1333.6445 1492.6875 1334.4707 1492.5479 c1334.4707 1488.6802 l1333.3672 1488.6802 l1333.3672 1488.6802 lf1368.7314 1398.4014 m1368.7314 1424.7734 l1368.7314 1428.0801 1366.9297 1430.8428 1362.5176 1430.8428 c1360.0352 1430.8428 1358.2383 1430.1499 1356.7188 1428.6353 c1357.1348 1427.3936 1357.2725 1426.1484 1357.2725 1423.5283 c1357.2725 1398.4014 l1348.8496 1398.4014 l1348.8496 1424.7734 l1348.8496 1427.8047 1348.0225 1430.9834 1342.6348 1430.9834 c1339.8809 1430.9834 1338.9063 1430.5664 1337.3945 1429.873 c1337.3945 1398.4014 l1328.9707 1398.4014 l1328.9707 1433.1865 l1332.1504 1434.5693 1336.6973 1436.2246 1343.0508 1436.2246 c1348.2988 1436.2246 1351.75 1434.9873 1353.8203 1433.1865 c1356.3066 1434.9873 1359.6152 1436.2246 1364.4531 1436.2246 c1373.2832 1436.2246 1377.1504 1431.1182 1377.1504 1424.7734 c1377.1504 1398.4014 l1368.7314 1398.4014 l1368.7314 1398.4014 lf1280.4785 1454.583 m1277.2969 1454.583 1274.8184 1455.2759 1273.1602 1456.1064 c1274.4043 1459.4204 l1275.6426 1458.8652 1277.2969 1458.3105 1279.6475 1458.3105 c1283.2383 1458.3105 1284.3418 1459.9692 1284.3418 1462.728 c1284.3418 1464.1138 l1283.6582 1463.6938 1282.2725 1463.1445 1279.9258 1463.1445 c1274.6797 1463.1445 1272.3281 1465.7646 1272.3281 1470.0449 c1272.3281 1484.54 l1277.9941 1484.54 l1277.9941 1470.3242 l1277.9941 1468.3896 1278.6816 1466.8726 1281.4414 1466.8726 c1282.8223 1466.8726 1283.6582 1467.2861 1284.3418 1467.5615 c1284.3418 1484.54 l1290.0078 1484.54 l1290.0078 1463.9722 l1290.0078 1457.207 1285.9961 1454.583 1280.4785 1454.583 c1280.4785 1454.583 lf1265.3604 1462.8691 m1261.2246 1462.8691 1259.1504 1465.0796 1259.1504 1468.6655 c1259.1504 1480.6748 l1256.7988 1480.6748 l1256.7988 1484.54 l1259.1504 1484.54 l1259.1504 1488.9595 l1264.8105 1490.4756 l1264.8105 1484.54 l1268.2617 1484.54 l1268.2617 1480.6748 l1264.8105 1480.6748 l1264.8105 1469.2178 l1264.8105 1467.2861 1265.7773 1466.7339 1267.1543 1466.7339 c1267.8457 1466.7339 1268.3975 1466.7339 1269.0898 1466.8726 c1269.0898 1463.2856 l1268.5352 1463.1445 1267.4258 1462.8691 1265.3604 1462.8691 c1265.3604 1462.8691 lf1247.3496 1463.1445 m1247.3496 1484.54 l1253 1484.54 l1253 1463.1445 l1247.3496 1463.1445 l1247.3496 1463.1445 lf1235.6475 1462.728 m1232.8848 1462.728 1230.6797 1463.4209 1229.0225 1464.248 c1230.4023 1467.8369 l1231.5117 1467.2861 1233.0273 1466.5933 1234.8242 1466.5933 c1236.8896 1466.5933 1238.1328 1467.2861 1238.1328 1468.9375 c1238.1328 1470.4619 1237.1719 1471.1514 1234.6816 1472.1128 c1230.5371 1473.7715 1229.709 1476.2573 1229.709 1478.6045 c1229.709 1482.0527 1232.334 1484.9556 1237.0293 1484.9556 c1239.6484 1484.9556 1241.5801 1484.2646 1243.1055 1483.4385 c1241.5801 1480.1235 l1240.8975 1480.5381 1239.3809 1481.2266 1237.7168 1481.2266 c1235.7852 1481.2266 1234.8242 1480.3975 1234.8242 1479.0205 c1234.8242 1477.498 1236.3359 1476.9492 1238.2725 1476.123 c1242.5469 1474.4644 1243.5117 1471.9785 1243.5117 1469.354 c1243.5117 1465.4902 1240.3379 1462.728 1235.6475 1462.728 c1235.6475 1462.728 lf1227.2246 1480.6748 m1226.8135 1480.8164 1225.5645 1480.9541 1224.6074 1480.9541 c1223.6387 1480.9541 1222.8018 1480.8164 1222.252 1480.6748 c1222.252 1463.1445 l1216.5957 1463.1445 l1216.5957 1483.2988 l1217.4277 1483.7129 1220.7402 1484.8159 1224.4688 1484.8159 c1226.666 1484.8159 1227.2246 1484.6753 1228.0547 1484.54 c1227.2246 1480.6748 l1227.2246 1480.6748 lf1280.7871 1398.4014 m1280.7871 1424.2178 l1280.7871 1427.8047 1279.2676 1430.4248 1274.5762 1430.4248 c1271.9473 1430.4248 1270.1543 1429.7383 1268.3672 1428.6353 c1268.3672 1398.4014 l1259.9434 1398.4014 l1259.9434 1448.0967 l1268.3672 1448.0967 l1268.3672 1434.29 l1270.5703 1435.2588 1273.7441 1435.9487 1276.6475 1435.9487 c1285.8975 1435.9487 1289.2051 1430.4248 1289.2051 1424.7734 c1289.2051 1398.4014 l1280.7871 1398.4014 l1280.7871 1398.4014 lf1167.8887 1487.1641 m1165.8184 1487.1641 1164.8477 1488.4072 1164.8477 1489.9263 c1164.8477 1491.4409 1165.8184 1492.6875 1167.8887 1492.6875 c1169.8242 1492.6875 1170.9238 1491.4409 1170.9238 1489.9263 c1170.9238 1488.4072 1169.8242 1487.1641 1167.8887 1487.1641 c1167.8887 1487.1641 lf1186.1172 1463.1445 m1180.7324 1463.1445 l1173.4141 1484.54 l1179.4941 1484.54 l1182.25 1474.4644 l1182.5313 1473.5 1183.2188 1471.0137 1183.4883 1469.7686 c1183.6309 1469.7686 l1183.7646 1471.0137 1184.4629 1473.5 1184.7344 1474.4644 c1187.6328 1484.54 l1193.2969 1484.54 l1186.1172 1463.1445 l1186.1172 1463.1445 lf1164.9395 1463.1445 m1164.9395 1484.54 l1170.5996 1484.54 l1170.5996 1463.1445 l1164.9395 1463.1445 l1164.9395 1463.1445 lf1250.2979 1487.1641 m1248.2285 1487.1641 1247.2578 1488.4072 1247.2578 1489.9263 c1247.2578 1491.4409 1248.2285 1492.6875 1250.2979 1492.6875 c1252.2305 1492.6875 1253.3301 1491.4409 1253.3301 1489.9263 c1253.3301 1488.4072 1252.2305 1487.1641 1250.2979 1487.1641 c1250.2979 1487.1641 lf1155.1641 1463.1445 m1155.1641 1478.1909 l1155.1641 1479.71 1154.4814 1481.2266 1151.7129 1481.2266 c1150.3359 1481.2266 1149.5078 1480.9541 1148.8203 1480.6748 c1148.8203 1463.1445 l1143.1602 1463.1445 l1143.1602 1483.2988 l1145.5078 1484.2646 1148.4043 1484.9556 1151.9902 1484.9556 c1158.4814 1484.9556 1160.834 1481.7803 1160.834 1478.1909 c1160.834 1463.1445 l1155.1641 1463.1445 l1155.1641 1463.1445 lf1178.7061 1440.2275 m1175.5313 1440.2275 1173.873 1442.3042 1173.873 1444.6494 c1173.873 1446.9902 1175.5313 1449.0625 1178.7061 1449.0625 c1181.7383 1449.0625 1183.5313 1446.9902 1183.5313 1444.6494 c1183.5313 1442.3042 1181.7383 1440.2275 1178.7061 1440.2275 c1178.7061 1440.2275 lf1209.5547 1398.4014 m1209.5547 1424.7734 l1209.5547 1427.8047 1208.3125 1430.9834 1202.9238 1430.9834 c1200.166 1430.9834 1198.7832 1430.5664 1197.2637 1429.873 c1197.2637 1398.4014 l1188.8457 1398.4014 l1188.8457 1433.1865 l1192.0195 1434.5693 1196.9863 1436.2246 1203.3398 1436.2246 c1214.3828 1436.2246 1217.9727 1430.8428 1217.9727 1424.9043 c1217.9727 1398.4014 l1209.5547 1398.4014 l1209.5547 1398.4014 lf1129.5229 1462.728 m1123.9951 1462.728 1119.8589 1465.6274 1119.8589 1471.2856 c1119.8589 1490.3418 l1125.7954 1490.3418 l1125.7954 1471.2856 l1125.7954 1468.6655 1127.1714 1467.2861 1129.5229 1467.2861 c1131.8687 1467.2861 1133.252 1468.6655 1133.252 1471.2856 c1133.252 1490.3418 l1139.1836 1490.3418 l1139.1836 1471.2856 l1139.1836 1465.6274 1135.0469 1462.728 1129.5229 1462.728 c1129.5229 1462.728 lf1174.4961 1398.4014 m1174.4961 1435.5352 l1182.9238 1435.5352 l1182.9238 1398.4014 l1174.4961 1398.4014 l1174.4961 1398.4014 lf1163.9395 1397.9912 m1156.623 1397.9912 1153.7266 1402.1299 1153.7266 1408.0674 c1153.7266 1430.1499 l1149.582 1430.1499 l1149.582 1435.5352 l1153.7266 1435.5352 l1153.7266 1442.9941 l1162.1465 1445.335 l1162.1465 1435.5352 l1168.084 1435.5352 l1168.084 1430.1499 l1162.1465 1430.1499 l1162.1465 1408.0674 l1162.1465 1404.7549 1163.9395 1403.7842 1166.291 1403.7842 c1166.9785 1403.7842 1167.9453 1403.7842 1168.7754 1403.9229 c1168.7754 1398.4014 l1167.9453 1398.2666 1165.7354 1397.9912 1163.9395 1397.9912 c1163.9395 1397.9912 lf1141.9902 1397.9912 m1134.6738 1397.9912 1131.7749 1402.1299 1131.7749 1408.0674 c1131.7749 1430.1499 l1127.6328 1430.1499 l1127.6328 1435.5352 l1131.7749 1435.5352 l1131.7749 1442.9941 l1140.1973 1445.335 l1140.1973 1435.5352 l1146.1309 1435.5352 l1146.1309 1430.1499 l1140.1973 1430.1499 l1140.1973 1408.0674 l1140.1973 1404.7549 1141.9902 1403.7842 1144.3418 1403.7842 c1145.0313 1403.7842 1145.9961 1403.7842 1146.8242 1403.9229 c1146.8242 1398.4014 l1145.9961 1398.2666 1143.7871 1397.9912 1141.9902 1397.9912 c1141.9902 1397.9912 lf1081.1929 1463.1445 m1081.1929 1478.1909 l1081.1929 1479.8496 1080.3638 1481.2266 1077.8789 1481.2266 c1076.4976 1481.2266 1075.6704 1480.8164 1074.8408 1480.3975 c1074.8408 1463.1445 l1069.1831 1463.1445 l1069.1831 1492.2705 l1074.8408 1492.2705 l1074.8408 1483.9878 l1075.6704 1484.4043 1077.3267 1484.9556 1079.1196 1484.9556 c1084.7808 1484.9556 1086.8521 1481.6406 1086.8521 1478.3271 c1086.8521 1463.1445 l1081.1929 1463.1445 l1081.1929 1463.1445 lf1060.624 1485.9189 m1060.624 1463.1445 l1054.6865 1463.1445 l1054.6865 1485.9189 l1049.166 1485.9189 l1049.166 1490.3418 l1066.2813 1490.3418 l1066.2813 1485.9189 l1060.624 1485.9189 l1060.624 1485.9189 lf963.98 1491.9976 m963.98 1504.6953 l970.1924 1503.1763 974.7495 1501.1074 979.5806 1498.4795 c979.5806 1486.6133 l974.7495 1488.8198 969.5059 1490.7549 963.98 1491.9976 c963.98 1491.9976 lf1081.6055 1398.4014 m1063.9341 1428.2183 l1062.8315 1430.0146 1062.0044 1431.8076 1061.0386 1434.0151 c1060.8999 1434.0151 l1061.1743 1431.6733 1061.314 1429.7383 1061.314 1427.9453 c1061.314 1398.4014 l1053.1709 1398.4014 l1053.1709 1445.7515 l1061.8667 1445.7515 l1078.2944 1417.8667 l1079.2593 1416.2119 1080.0864 1414.6914 1080.918 1412.4873 c1081.0557 1412.4873 l1080.7759 1414.832 1080.7759 1416.4844 1080.7759 1418.1426 c1080.7759 1445.7515 l1088.9204 1445.7515 l1088.9204 1398.4014 l1081.6055 1398.4014 l1081.6055 1398.4014 lf954.8677 1428.0801 m955.6987 1454.0352 l955.6987 1455.6895 956.9399 1456.9316 958.4604 1456.9316 c960.1191 1456.9316 961.2168 1455.6895 961.2168 1454.0352 c962.187 1428.0801 l954.8677 1428.0801 l954.8677 1428.0801 lf958.4604 1378.5273 m949.4858 1378.5273 943.2769 1381.1494 936.0952 1384.8779 c929.7495 1388.1846 923.5337 1390.2588 915.3887 1390.2588 c907.7983 1390.2588 898.686 1388.3252 888.8867 1382.252 c897.0308 1394.3955 907.7983 1397.9912 917.8745 1397.9912 c928.644 1397.9912 937.062 1394.6748 944.6558 1390.8047 c951.6968 1387.2256 957.2153 1385.4326 964.9478 1385.4326 c971.4375 1385.4326 978.6147 1387.2256 985.3784 1392.877 c976.958 1381.8359 967.1567 1378.5273 958.4604 1378.5273 c958.4604 1378.5273 lf*u1 D1310.2871 1484.9556 m1303.9434 1484.9556 1300.9023 1480.2598 1300.9023 1473.9102 c1300.9023 1467.4204 1303.9434 1462.728 1310.2871 1462.728 c1316.6406 1462.728 1319.6816 1467.4204 1319.6816 1473.9102 c1319.6816 1480.2598 1316.6406 1484.9556 1310.2871 1484.9556 c1310.2871 1484.9556 lf0 D1310.2871 1466.458 m1307.3945 1466.458 1306.7061 1469.7686 1306.7061 1473.9102 c1306.7061 1477.915 1307.3945 1481.2266 1310.2871 1481.2266 c1313.1934 1481.2266 1313.8828 1477.915 1313.8828 1473.9102 c1313.8828 1469.7686 1313.1934 1466.458 1310.2871 1466.458 c1310.2871 1466.458 lf*U*u1 D1308.8066 1436.2246 m1303.0078 1436.2246 1298.5859 1434.5693 1296.1094 1433.4658 c1298.0313 1428.356 l1300.2441 1429.4658 1303.6914 1430.7041 1307.2832 1430.7041 c1311.7051 1430.7041 1314.6016 1429.4658 1314.6016 1424.6328 c1314.6016 1422.5605 l1313.9082 1422.6978 1311.4268 1423.1143 1309.2188 1423.1143 c1300.6602 1423.1143 1293.7578 1418.6938 1293.7578 1409.8643 c1293.7578 1402.6846 1298.5859 1397.3008 1309.0801 1397.3008 c1314.8789 1397.3008 1319.5723 1398.4014 1322.748 1399.9189 c1322.748 1423.249 l1322.748 1432.9141 1316.5332 1436.2246 1308.8066 1436.2246 c1308.8066 1436.2246 lf0 D1314.6016 1403.0977 m1313.6309 1402.6846 1311.5605 1402.1299 1309.6348 1402.1299 c1305.2129 1402.1299 1302.1758 1405.0293 1302.1758 1410.1416 c1302.1758 1414.9658 1304.8047 1418.2803 1309.9121 1418.2803 c1312.2578 1418.2803 1313.7734 1417.8667 1314.6016 1417.7295 c1314.6016 1403.0977 l1314.6016 1403.0977 lf*U*u1 D1212.998 1474.3271 m1212.998 1481.0869 1209.5508 1484.9556 1203.7461 1484.9556 c1197.8145 1484.9556 1194.2188 1480.8164 1194.2188 1473.9102 c1194.2188 1466.7339 1198.2246 1462.728 1204.5742 1462.728 c1207.8867 1462.728 1210.373 1463.4209 1212.166 1464.3857 c1210.7852 1468.1167 l1209.2725 1467.4204 1207.6094 1466.8726 1205.1289 1466.8726 c1202.5039 1466.8726 1200.1563 1467.9746 1199.7402 1472.1128 c1212.998 1472.1128 l1212.998 1474.3271 l1212.998 1474.3271 lf0 D1207.6094 1475.7031 m1199.6064 1475.7031 l1199.6064 1479.8496 1201.2617 1481.3652 1203.6133 1481.3652 c1205.8223 1481.3652 1207.6094 1479.9863 1207.6094 1475.979 c1207.6094 1475.7031 l1207.6094 1475.7031 lf*U*u1 D1241.1602 1436.2246 m1229.1504 1436.2246 1223.2188 1428.6353 1223.2188 1416.6201 c1223.2188 1405.0293 1229.1504 1398.126 1238.125 1398.126 c1241.4385 1398.126 1243.9229 1398.6807 1245.4355 1399.5078 c1245.4355 1397.1602 l1245.4355 1392.1953 1242.8145 1389.0186 1236.6035 1389.0186 c1232.4688 1389.0186 1229.8398 1390.123 1227.6309 1391.084 c1225.2832 1385.8398 l1228.0508 1384.3213 1232.4688 1383.085 1238.125 1383.085 c1247.375 1383.085 1253.7246 1388.1846 1253.7246 1397.9912 c1253.7246 1433.6079 l1251.2383 1434.9873 1246.8203 1436.2246 1241.1602 1436.2246 c1241.1602 1436.2246 lf0 D1245.4355 1404.8887 m1244.1973 1404.2021 1242.541 1403.6543 1240.6104 1403.6543 c1234.6768 1403.6543 1232.0479 1408.0674 1232.0479 1416.6201 c1232.0479 1425.46 1234.8125 1430.9834 1241.0176 1430.9834 c1242.8145 1430.9834 1244.1973 1430.8428 1245.4355 1430.1499 c1245.4355 1404.8887 l1245.4355 1404.8887 lf*U*u1 D1108.3403 1474.3271 m1108.3403 1481.0869 1104.8853 1484.9556 1099.0942 1484.9556 c1093.1538 1484.9556 1089.563 1480.8164 1089.563 1473.9102 c1089.563 1466.7339 1093.5679 1462.728 1099.916 1462.728 c1103.2334 1462.728 1105.7173 1463.4209 1107.5132 1464.3857 c1106.1318 1468.1167 l1104.6128 1467.4204 1102.9541 1466.8726 1100.4702 1466.8726 c1097.8481 1466.8726 1095.502 1467.9746 1095.0874 1472.1128 c1108.3403 1472.1128 l1108.3403 1474.3271 l1108.3403 1474.3271 lf0 D1102.9541 1475.7031 m1094.9497 1475.7031 l1094.9497 1479.8496 1096.606 1481.3652 1098.9546 1481.3652 c1101.1636 1481.3652 1102.9541 1479.9863 1102.9541 1475.979 c1102.9541 1475.7031 l1102.9541 1475.7031 lf*U*u1 D1109.6841 1436.2246 m1099.1938 1436.2246 1093.9492 1428.2183 1093.9492 1416.9023 c1093.9492 1405.7178 1099.1938 1397.7148 1109.6841 1397.7148 c1120.1782 1397.7148 1125.4199 1405.7178 1125.4199 1416.9023 c1125.4199 1428.2183 1120.1782 1436.2246 1109.6841 1436.2246 c1109.6841 1436.2246 lf0 D1110.23 1402.8184 m1104.4287 1402.8184 1103.4673 1410.2744 1103.4673 1416.9023 c1103.4673 1423.667 1104.4287 1431.1182 1110.23 1431.1182 c1116.0254 1431.1182 1116.9946 1423.667 1116.9946 1416.9023 c1116.9946 1410.2744 1116.0254 1402.8184 1110.23 1402.8184 c1110.23 1402.8184 lf*U*u1 D963.98 1489.2334 m960.6665 1490.0659 957.0786 1490.6138 953.4907 1491.0273 c953.4907 1506.9053 l949.6245 1507.457 945.6216 1507.7314 941.4819 1507.7314 c937.6143 1507.7314 933.749 1507.457 930.0225 1507.0415 c930.0225 1491.9976 l926.4331 1491.5796 922.9819 1490.8906 919.6694 1490.0659 c919.6694 1504.9692 l913.7319 1503.3125 908.0737 1500.9678 902.9663 1498.0684 c902.9663 1467.1445 l910.0044 1460.3828 l907.9355 1425.6006 l902.2749 1419.939 l902.2749 1399.7871 l904.21 1397.7148 l908.9014 1400.1943 914.8364 1402.2666 922.0151 1402.2666 c928.9155 1402.2666 936.9243 1400.3369 945.8989 1395.3633 c945.8989 1421.0361 l942.1714 1425.7393 l942.1714 1461.3521 l949.4858 1472.6714 l946.4497 1461.7686 l948.521 1462.0371 950.5913 1462.1758 952.8003 1462.1758 c959.979 1462.1758 966.6021 1460.9375 972.2646 1458.7246 c979.5806 1465.4902 l979.5806 1483.8481 l974.7495 1486.0601 969.5059 1487.8555 963.98 1489.2334 c963.98 1489.2334 lf0 D920.0801 1428.0801 m920.9116 1454.0352 l920.9116 1455.6895 922.1548 1456.9316 923.6733 1456.9316 c925.1938 1456.9316 926.4331 1455.6895 926.4331 1454.0352 c927.4023 1428.0801 l920.0801 1428.0801 l920.0801 1428.0801 lf*U1018.1382 1370.9697 m1016.0942 1370.9697 l1016.0942 1515.1045 l1018.1382 1515.1045 l1018.1382 1370.9697 l1018.1382 1370.9697 lf*u1 D909.2241 1326.3721 m909.2241 1338.0391 l907.2534 1338.0391 l907.2534 1325.5166 l907.2534 1323.7197 907.106 1322.7168 906.6938 1321.9805 c905.9868 1320.6836 904.5122 1320.0059 902.3901 1320.0059 c899.0898 1320.0059 897.4683 1321.4775 897.4683 1324.75 c897.4683 1338.0391 l895.1143 1338.0391 l895.1143 1326.4893 l895.1143 1322.7451 895.2612 1321.8027 896.144 1320.5361 c897.2036 1319.0068 899.4429 1318.0654 902.0371 1318.0654 c904.4829 1318.0654 906.3696 1318.6826 907.6064 1319.8584 c908.9595 1321.1836 909.2241 1322.2139 909.2241 1326.3721 c909.2241 1326.3721 lf928.1689 1318.3896 m928.1689 1338.0391 l926.1982 1338.0391 l926.1982 1320.5664 l917.356 1338.0391 l914.0005 1338.0391 l914.0005 1318.3896 l915.9712 1318.3896 l915.9712 1335.627 l924.8135 1318.3896 l928.1689 1318.3896 l928.1689 1318.3896 lf935.4761 1318.3877 m935.4761 1338.041 l933.1221 1338.041 l933.1221 1318.3877 l935.4761 1318.3877 l935.4761 1318.3877 lf952.8003 1336.2744 m952.8003 1338.0391 l938.3071 1338.0391 l938.3071 1336.2744 l944.3765 1336.2744 l944.3765 1318.3896 l946.7305 1318.3896 l946.7305 1336.2744 l952.8003 1336.2744 l952.8003 1336.2744 lf967.0894 1318.3896 m967.0894 1320.1533 l957.9849 1320.1533 l957.9849 1327.8184 l966.7061 1327.8184 l966.7061 1329.5811 l957.9849 1329.5811 l957.9849 1336.2744 l966.9419 1336.2744 l966.9419 1338.0391 l955.6323 1338.0391 l955.6323 1318.3896 l967.0894 1318.3896 l967.0894 1318.3896 lf985.1509 1328.1992 m985.1509 1331.8545 984.0908 1334.6523 982.1196 1336.333 c980.6157 1337.5967 978.8472 1338.0391 975.3101 1338.0391 c970.6284 1338.0391 l970.6284 1318.3896 l974.603 1318.3896 l978.4644 1318.3896 979.7612 1318.626 981.4111 1319.6826 c983.7974 1321.2441 985.1509 1324.2803 985.1509 1328.1992 c985.1509 1328.1992 lf0 D982.6196 1328.1992 m982.6196 1325.25 981.9126 1323.042 980.5864 1321.7441 c979.3486 1320.5078 977.9336 1320.1533 974.2788 1320.1533 c972.9814 1320.1533 l972.9814 1336.2744 l974.9565 1336.2744 l978.2876 1336.2744 979.4668 1335.9492 980.6753 1334.7412 c981.9722 1333.4443 982.6196 1331.2939 982.6196 1328.1992 c982.6196 1328.1992 lf1 D1010.5181 1318.3896 m1001.4731 1328.9072 l1010.2822 1338.0391 l1007.4834 1338.0391 l998.939 1329.083 l998.939 1338.0391 l996.5864 1338.0391 l996.5864 1318.3896 l998.939 1318.3896 l998.939 1328.5244 l1007.5723 1318.3896 l1010.5181 1318.3896 l1010.5181 1318.3896 lf1015.7036 1318.3877 m1015.7036 1338.041 l1013.3506 1338.041 l1013.3506 1318.3877 l1015.7036 1318.3877 l1015.7036 1318.3877 lf1034.8247 1318.3896 m1034.8247 1338.0391 l1032.854 1338.0391 l1032.854 1320.5664 l1024.0132 1338.0391 l1020.6567 1338.0391 l1020.6567 1318.3896 l1022.627 1318.3896 l1022.627 1335.627 l1031.4692 1318.3896 l1034.8247 1318.3896 l1034.8247 1318.3896 lf1053.3862 1319.7109 m1053.3862 1327.6104 l1051.1216 1327.6104 l1051.1216 1320.7139 l1049.6479 1320.2695 1048.0854 1320.0059 1046.8481 1320.0059 c1044.9619 1320.0059 1043.8413 1320.5361 1042.9272 1321.833 c1041.9844 1323.1885 1041.4248 1325.5449 1041.4248 1328.3164 c1041.4248 1333.71 1043.2524 1336.2744 1047.0825 1336.2744 c1048.3218 1336.2744 1050.3853 1335.9775 1052.3862 1335.4775 c1052.7983 1337.2158 l1050.2075 1338.0088 1048.5283 1338.3027 1046.9355 1338.3027 c1041.7192 1338.3027 1038.8945 1334.8018 1038.8945 1328.1992 c1038.8945 1321.7158 1041.6011 1318.0068 1046.2881 1318.0068 c1048.2925 1318.0068 1050.5615 1318.5381 1053.3862 1319.7109 c1053.3862 1319.7109 lf1072.1558 1328.1992 m1072.1558 1331.8545 1071.0947 1334.6523 1069.1235 1336.333 c1067.6206 1337.5967 1065.8511 1338.0391 1062.314 1338.0391 c1057.6323 1338.0391 l1057.6323 1318.3896 l1061.6069 1318.3896 l1065.4692 1318.3896 1066.7651 1318.626 1068.4165 1319.6826 c1070.8013 1321.2441 1072.1558 1324.2803 1072.1558 1328.1992 c1072.1558 1328.1992 lf0 D1069.6245 1328.1992 m1069.6245 1325.25 1068.9175 1323.042 1067.5913 1321.7441 c1066.3525 1320.5078 1064.9375 1320.1533 1061.2837 1320.1533 c1059.9863 1320.1533 l1059.9863 1336.2744 l1061.9614 1336.2744 l1065.2915 1336.2744 1066.4707 1335.9492 1067.6792 1334.7412 c1068.9761 1333.4443 1069.6245 1331.2939 1069.6245 1328.1992 c1069.6245 1328.1992 lf1 D1091.5415 1328.1104 m1091.5415 1334.6523 1088.6572 1338.2725 1083.4702 1338.2725 c1078.2837 1338.2725 1075.3389 1334.6523 1075.3389 1328.1689 c1075.3389 1321.5391 1078.1353 1318.0352 1083.4106 1318.0352 c1088.6885 1318.0352 1091.5415 1321.5693 1091.5415 1328.1104 c1091.5415 1328.1104 lf0 D1089.0112 1328.1104 m1089.0112 1322.5693 1087.2139 1319.9189 1083.4995 1319.9189 c1081.7319 1319.9189 1080.228 1320.5664 1079.4033 1321.6865 c1078.4595 1322.9551 1077.8691 1325.4883 1077.8691 1328.1406 c1077.8691 1333.5928 1079.7856 1336.3916 1083.5308 1336.3916 c1087.2417 1336.3916 1089.0112 1333.6826 1089.0112 1328.1104 c1089.0112 1328.1104 lf1 D1114.4653 1318.3896 m1113.8179 1338.0391 l1110.4604 1338.0391 l1104.8013 1320.2695 l1099.0845 1338.0391 l1095.728 1338.0391 l1095.0806 1318.3896 l1097.2583 1318.3896 l1097.6392 1335.7715 l1103.2397 1318.3896 l1106.0698 1318.3896 l1111.728 1335.7715 l1112.0522 1318.3896 l1114.4653 1318.3896 l1114.4653 1318.3896 lf1133.8511 1326.7246 m1133.8511 1328.0195 1132.7905 1329.0811 1131.4956 1329.0811 c1130.1987 1329.0811 1129.1411 1328.0195 1129.1411 1326.7246 c1129.1411 1325.4297 1130.1987 1324.3711 1131.4956 1324.3711 c1132.7905 1324.3711 1133.8511 1325.4297 1133.8511 1326.7246 c1133.8511 1326.7246 lf1161.4004 1319.4775 m1160.8379 1321.1836 l1158.3643 1320.4189 1156.7754 1320.0967 1155.5664 1320.0967 c1152.2061 1320.0967 1150.3496 1323.0713 1150.3496 1328.4912 c1150.3496 1333.5322 1152.3242 1336.3047 1155.918 1336.3047 c1157.1875 1336.3047 1158.6289 1336.127 1160.5137 1335.7158 c1160.9297 1337.4805 l1159.1016 1338.0391 1157.2168 1338.3613 1155.8008 1338.3613 c1150.6426 1338.3613 1147.8203 1334.7695 1147.8203 1328.1689 c1147.8203 1321.7744 1150.5859 1318.0068 1155.1816 1318.0068 c1156.7754 1318.0068 1159.041 1318.5381 1161.4004 1319.4775 c1161.4004 1319.4775 lf1178.5469 1318.3896 m1178.5469 1338.0391 l1176.1953 1338.0391 l1176.1953 1329.6113 l1166.7617 1329.6113 l1166.7617 1338.0391 l1164.4063 1338.0391 l1164.4063 1318.3896 l1166.7617 1318.3896 l1166.7617 1327.8467 l1176.1953 1327.8467 l1176.1953 1318.3896 l1178.5469 1318.3896 l1178.5469 1318.3896 lf1185.8516 1318.3877 m1185.8516 1338.041 l1183.5 1338.041 l1183.5 1318.3877 l1185.8516 1318.3877 l1185.8516 1318.3877 lf1204.9727 1318.3896 m1204.9727 1338.0391 l1203.002 1338.0391 l1203.002 1320.5664 l1194.1621 1338.0391 l1190.8066 1338.0391 l1190.8066 1318.3896 l1192.7773 1318.3896 l1192.7773 1335.627 l1201.6211 1318.3896 l1204.9727 1318.3896 l1204.9727 1318.3896 lf1224.4521 1318.3896 m1217.293 1338.0391 l1214.6133 1338.0391 l1207.627 1318.3896 l1209.75 1318.3896 l1211.6367 1323.6631 l1220.1211 1323.6631 l1222.0352 1318.3896 l1224.4521 1318.3896 l1224.4521 1318.3896 lf0 D1219.4414 1325.458 m1212.252 1325.458 l1215.7871 1336.0078 l1219.4414 1325.458 l1219.4414 1325.458 lf1 D1241.7148 1326.7246 m1241.7148 1328.0195 1240.6582 1329.0811 1239.3633 1329.0811 c1238.0645 1329.0811 1237.002 1328.0195 1237.002 1326.7246 c1237.002 1325.4297 1238.0645 1324.3711 1239.3633 1324.3711 c1240.6582 1324.3711 1241.7148 1325.4297 1241.7148 1326.7246 c1241.7148 1326.7246 lf1275.4219 1318.3896 m1274.7754 1338.0391 l1271.4189 1338.0391 l1265.7598 1320.2695 l1260.043 1338.0391 l1256.6855 1338.0391 l1256.0371 1318.3896 l1258.2148 1318.3896 l1258.5996 1335.7715 l1264.1953 1318.3896 l1267.0273 1318.3896 l1272.6836 1335.7715 l1273.0098 1318.3896 l1275.4219 1318.3896 l1275.4219 1318.3896 lf1294.7227 1318.3896 m1287.5605 1338.0391 l1284.8789 1338.0391 l1277.8984 1318.3896 l1280.0195 1318.3896 l1281.9043 1323.6631 l1290.3926 1323.6631 l1292.3066 1318.3896 l1294.7227 1318.3896 l1294.7227 1318.3896 lf0 D1289.7129 1325.458 m1282.5234 1325.458 l1286.0566 1336.0078 l1289.7129 1325.458 l1289.7129 1325.458 lf1 D1308.5078 1318.3896 m1308.5078 1320.1533 l1299.7305 1320.1533 l1299.7305 1338.0391 l1297.3789 1338.0391 l1297.3789 1318.3896 l1308.5078 1318.3896 l1308.5078 1318.3896 lf1326.043 1318.3896 m1318.8809 1338.0391 l1316.1992 1338.0391 l1309.2188 1318.3896 l1311.3398 1318.3896 l1313.2246 1323.6631 l1321.709 1323.6631 l1323.627 1318.3896 l1326.043 1318.3896 l1326.043 1318.3896 lf0 D1321.0332 1325.458 m1313.8438 1325.458 l1317.377 1336.0078 l1321.0332 1325.458 l1321.0332 1325.458 lf1 D1339.3828 1338.0391 m1337.0254 1338.0391 l1331.8125 1328.9658 l1326.4512 1338.0391 l1323.7441 1338.0391 l1330.4297 1326.9932 l1330.4297 1318.3896 l1332.7871 1318.3896 l1332.7871 1326.9932 l1339.3828 1338.0391 l1339.3828 1338.0391 lf1352.0801 1323.9854 m1352.0801 1326.9609 1350.9629 1328.2578 1346.6621 1329.583 c1342.9766 1330.7021 1342.4746 1331.2354 1342.4746 1333.002 c1342.4746 1335.0967 1343.9766 1336.2744 1346.1289 1336.2744 c1347.3379 1336.2744 1348.8457 1336.0664 1350.7852 1335.6553 c1351.1973 1337.3916 l1349.373 1337.9219 1347.6064 1338.2168 1346.043 1338.2168 c1342.4434 1338.2168 1340.123 1336.1553 1340.123 1332.7969 c1340.123 1328.2578 1344.6563 1327.9932 1347.8398 1326.5469 c1349.373 1325.8721 1349.7285 1325.1338 1349.7285 1323.6885 c1349.7285 1321.5693 1347.8711 1320.1533 1345.3633 1320.1533 c1343.9512 1320.1533 1342.3867 1320.4189 1340.418 1320.9189 c1339.9141 1319.124 l1342.0938 1318.4766 1343.6523 1318.2129 1345.5137 1318.2129 c1349.4902 1318.2129 1352.0801 1320.4189 1352.0801 1323.9854 c1352.0801 1323.9854 lf1357.9746 1318.3877 m1357.9746 1338.041 l1355.6172 1338.041 l1355.6172 1318.3877 l1357.9746 1318.3877 l1357.9746 1318.3877 lf1377.4492 1318.3896 m1370.29 1338.0391 l1367.6094 1338.0391 l1360.625 1318.3896 l1362.7461 1318.3896 l1364.6348 1323.6631 l1373.1191 1323.6631 l1375.0332 1318.3896 l1377.4492 1318.3896 l1377.4492 1318.3896 lf0 D1372.4395 1325.458 m1365.25 1325.458 l1368.7871 1336.0078 l1372.4395 1325.458 l1372.4395 1325.458 lf*UU/BBAccumRotation (0.000000) XTLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF